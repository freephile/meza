---
# Meza default config file

# used by autodeployer to track a named branch, tag, or SHA1
# @FIXME when this is defined, you can not deploy with modifications in
# /opt/meza so you can not change anything
# add another 'enfoce_mode' variable, or a host!=localhost condition
# enforce_meza_version: REL1_39

# The source code repo for Meza
# e.g. Use our local repo fork temporarily
# meza_repository_url: https://github.com/freephile/meza.git
# You can override this using Ansible 'extra-vars'
# yamllint disable-line rule:line-length
# sudo time meza deploy monolith -vvv --tags base,httpd-reload -e meza_repository_url=https://github.com/freephile/meza.git
# Note: a similar variable is used in getmeza.sh
# That script (or git on the CLI) controls your meza sources currently.
# The variable here is NOT used to check out new versions of meza on deploys
# but rather used in playbooks/check-for-changes and roles/enforce-meza-version
# as part of the Autodeployer https://www.mediawiki.org/wiki/Meza/Autodeployer
meza_repository_url: https://github.com/freephile/meza.git

# Should composer install Dev Dependencies
# Toggle this to 'false' for any development
# 'true' Disables require-dev packages
m_disable_composer_dev_dependencies: false

# Production mode toggles opcache to ignore timestamps
# so live edits will NOT be seen without restarting the webserver or php-fpm.
# Production mode decreases opcache log verbosity to exclude warnings.
# Toggle this to 'false' for any development.
m_opcache_production_mode: false

m_httpd_server_admin: "admin@example.com"
m_timezone: "America/New_York"

# Poorly documented and not really used method to specify networking zone
m_private_networking_zone: public

meza_server_log_db: meza_server_log

use_ntp: true

ntp_server: [0.pool.ntp.org, 1.pool.ntp.org, 2.pool.ntp.org, 3.pool.ntp.org]

m_language: en

allow_backup_downloads: false

# Allow skipping certain wikis when doing backups
# Example:
# wikis_to_skip_overwrite
#   - mywiki
#   - yourwiki
wikis_to_skip_overwrite: []

# Allow redirecting wiki IDs to other wikis.
# This is useful if if wikis are renamed or merged.
# Example:
# wiki_id_redirects:
#   eva: iss
#   oso: iss
#   robo: iss
wiki_id_redirects: {}

m_force_debug: false

enable_wiki_emails: true

# Enable the use of LetsEncrypt certificates
use_certbot: true

# Enable the use of Kibana as an interface to ElasticSearch
m_install_kibana: true

enable_haproxy_stats: false
haproxy_stats_user: admin
haproxy_stats_password: password

# Only useful for developers and testing performance issues
m_setup_php_profiling: false

# Enable slow query log
mysql_slow_query_log_enabled: true
mysql_slow_query_time: "5"
# mysql_slow_query_log_file: /var/log/mariadb/slow-queries.log

# Default to using the performance schema
# But allow it to be turned OFF easily in low mem environments
# or for high performance environments like prod
# http://dev.mysql.com/doc/refman/5.5/en/performance-schema.html
# https://mariadb.com/kb/en/mariadb/performance-schema-overview/
mysql_performance_schema: "on"

# Netdata is a monitoring and alerting system
m_install_netdata: false
# netdata runs on 19999 by default. We'll expose it at 20000
netdata_internal_port: 19999
netdata_external_port: 20000

# If false, keep all SQL files on backup servers. If true, only keep the latest
do_cleanup_sql_backup: false

# sshd_config defaults
sshd_config_UsePAM: "yes"
sshd_config_PasswordAuthentication: "yes"
use_default_ssh_config: false

m_modify_etc_sudoers: true
m_meza_sudeoers_file: "/etc/sudoers.d/meza-ansible"

#
# Software versions
#

# Version of MediaWiki core
mediawiki_version: "REL1_43"  # FIXME set a specific version

# Depth of MediaWiki clone - to avoid having ALL the project history
mediawiki_git_depth: "100"

# Branch to use for extensions and skins without a more specific version
mediawiki_default_branch: "REL1_43"

# CAUTION: if set to true, a deploy will overwrite manual changes made on disk
# to MediaWiki core, Meza core extensions and skins + Local extensions and skins
# including any that are installed via composer.
overwrite_local_changes: true

# PHP version
php_ius_version: "php81"
php_debian_version: "8.1"
php_memory_limit: "128M" # 128M is default

# See Extension:CirrusSearch for ElasticSearch requirements
# Meza before 31.x had ElasticSearch 1.6 or 2.x
# Meza 31.x had 5.x
# Meza 32.x through 34.x were never released, but had 5.x or 6.x
# Meza 35.x uses 6.x
# Meza 39.x uses 7.x
elasticsearch_major_version: "7.x"

# Whether or not to install Lua/luasandbox
m_install_lua: false

# This can't be in Debian.yml, because that is loaded prior to defaults.yml
packages_php_debian:
  - php{{ php_debian_version }}-common
  - php{{ php_debian_version }}-cli
  - php{{ php_debian_version }}-dev
  # - php{{ php_debian_version }}-fpm
  - libpcre3-dev
  - php{{ php_debian_version }}-gd
  - php{{ php_debian_version }}-curl
  - php{{ php_debian_version }}-imap
  # - php{{ php_debian_version }}-json
  - php{{ php_debian_version }}-opcache
  - php{{ php_debian_version }}-xml
  - php{{ php_debian_version }}-mbstring
  - php{{ php_debian_version }}-mysql
  - php{{ php_debian_version }}-odbc
  - php{{ php_debian_version }}-pspell
  - php{{ php_debian_version }}-snmp
  - php{{ php_debian_version }}-xmlrpc
  - php{{ php_debian_version }}-bcmath
  - php{{ php_debian_version }}-intl
  - php{{ php_debian_version }}-soap
  - php-sqlite3
  - php-apcu
  - php-pear
  - php-memcached

  # No PHP 7.2 version of this (just like with IUS)
  - php{{ php_debian_version }}-mcrypt

  # No apt package corresponding to:
  #   "{{ php_ius_version }}-process"
  #   "{{ php_ius_version }}-pdo"

# SAML
# The library version to install
# For MW 1.39, we need the library at 2.1.1 and PHP >=8.0
## @FIXME: changing library blows away the existing installation directory
## DO NOT CHANGE THIS WITHOUT BACKING UP YOUR CONFIG AND LOGS
simplesamlphp_version: "2.2.1"
# Extension:PluggableAuth 7.0
# Extension:SimpleSAMLphp 7.0
# These two extensions may diverge in their release naming
# (already has with 7.1.0 and 7.0.1) so we may need to make two config variables
saml_mw_extension_version: "tags/7.0.0"


#
# NOTIFICATIONS
#
server_performance_crontime: "*/10 * * * *"

# at what level do we display amber colored notification
server_performance_memory_usage_warning: "50"

# same as ^ but red danger message
server_performance_memory_usage_danger: "75"

disk_space_usage_crontime: "0 1 * * *"

# Icons display in Slack
server_performance_notification_icon: |
  https://github.com/enterprisemediawiki/meza/raw/master/src/roles/configure-wiki/files/logo.png
disk_space_usage_notification_icon: |
  https://github.com/enterprisemediawiki/meza/raw/master/src/roles/configure-wiki/files/logo.png

# secret.yml has additional configuration options commented out. See that file
# for more details.


#
# Misc cron times
#

# Cleanup upload stash (temporary files) daily at 6pm
clean_upload_stash_crontime: "0 18 * * *"

#
# PHP config
#

# PHP max file size. This gets applied to php.ini variables upload_max_filesize
# and post_max_size for convenience.
php_max_upload_filesize: "5G"

# The OPcache shared memory storage size
php_opcache_memory_consumption: 256

# The amount of memory for interned strings in Mbytes
php_opcache_interned_strings_buffer: 16

# The amount of input variables that may be accepted
php_max_input_vars: 2000

# It's important for this number to be greater than the number of PHP files on a
# server.
# sudo find /opt/htdocs -type f -print | grep php | wc -l
#    On one server on 17-SEP-2018, 13859 files
# sudo find /opt/conf-meza -type f -print | grep php | wc -l
#    On one server on 17-SEP-2018, 134 files
# sudo find /opt/simplesamlphp -type f -print | grep php | wc -l
#    On one server on 17-SEP-2018, 5032 files
# total = ~19000 files
#
# This number could be increased based on the number of extensions in a server's
# MezaLocalExtensions.yml file. In order to leave plenty of room, pick a prime
# number about 50% bigger than 19000.
php_opcache_max_accelerated_files: 28001

# How often (in seconds) to check file timestamps for changes to the shared
# memory storage allocation. ("1" means validate once per second, but only
# once per request. "0" means always validate)
php_opcache_revalidate_freq: 0


#
# Memcached config
#

# Port to use
memcached_port: 11211

# Limit the number of simultaneous incoming connections.
memcached_max_connections: 1024

# Max amount of memory to use. Note that the daemon will grow to this size, but
# does not start out holding this much
memcached_memory: 512

# User to run memcached
# user_memcached: see RedHat.yml and Debian.yml

# TCP port on which to run php-fpm
#
m_php_fpm_port: 9000

#
# Helpers to group load balancer types
#

# All load balancer types
load_balancers_all: >
  {{
  ( groups.get('load_balancers', [] ) ) +
  ( groups.get('load_balancers_meza_internal', [] ) ) +
  ( groups.get('load_balancers_meza_external', [] ) ) +
  ( groups.get('load_balancers_nonmeza', [] ) ) +
  ( groups.get('load_balancers_nonmeza_internal', [] ) ) +
  ( groups.get('load_balancers_nonmeza_external', [] ) )
  }}


# Just load balancers for handling internal services
load_balancers_internal: >
  {{
  ( groups.get('load_balancers_meza_internal', [] ) ) +
  ( groups.get('load_balancers_nonmeza_internal', [] ) )
  }}

# Just load balancers for handling external traffic
load_balancers_external: >
  {{
  ( groups.get('load_balancers_meza_external', [] ) ) +
  ( groups.get('load_balancers_nonmeza_external', [] ) )
  }}

# Just load balancers that handle internal and external
load_balancers_full: >
  {{
  ( groups.get('load_balancers', [] ) ) +
  ( groups.get('load_balancers_nonmeza', [] ) )
  }}

# Just load balancers managed by Meza
load_balancers_meza: >
  {{
  ( groups.get('load_balancers', [] ) ) +
  ( groups.get('load_balancers_meza_internal', [] ) ) +
  ( groups.get('load_balancers_meza_external', [] ) )
  }}

# Just unmanaged load balancers (AWS, etc).
load_balancers_nonmeza: >
  {{
  ( groups.get('load_balancers_nonmeza', [] ) ) +
  ( groups.get('load_balancers_nonmeza_internal', [] ) ) +
  ( groups.get('load_balancers_nonmeza_external', [] ) )
  }}
