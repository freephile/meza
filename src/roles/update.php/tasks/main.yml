---

- ansible.builtin.debug: { msg: "Running role:update.php for {{ wiki_id }}" }

- name: Set backup timestamp fact
  set_fact:
    backup_timestamp: "{{lookup('pipe','date +%Y%m%d%H%M%S')}}"

- name: Ensure backups directory exists for wiki
  file:
    path: "{{ m_backups }}/{{ env }}/{{ wiki_id }}"
    state: directory
    mode: "{{ m_backups_mode }}"
    owner: "{{ m_backups_owner }}"
    group: "{{ m_backups_group }}"
  delegate_to: "{{ groups['backup_servers'][0] }}"

#
# DUMP SQL from DB Master to backup_servers[0]
#
- name: "Backup wiki database prior to running update.php"
  import_role:
    name: remote-mysqldump
  vars:
    remote_server:      "{{ groups['db_master'][0] }}"
    dump_database:      "wiki_{{ wiki_id }}"
    target_server:      "{{ groups['backup_servers'][0] }}"
    target_server_path: "{{ m_backups }}/{{ env }}/{{ wiki_id }}/{{ backup_timestamp }}_wiki.sql"
  run_once: true
  tags:
    - update.php
    - update.php-backup

- name: "Clean out all but the latest SQL backup file for {{ wiki_id }} IF DESIRED"
  import_role:
    name: sql-backup-cleanup
  vars:
    cleanup_wiki: "{{ wiki_id }}"
  run_once: true
  tags:
    - update.php
    - sql-backup-cleanup
  when: do_cleanup_sql_backup

- name: Ensure update.php log exists
  file:
    path: "{{ m_logs }}/update.php"
    state: directory
    mode: "{{ m_logs_mode }}"
    owner: "{{ m_logs_owner }}"
    group: "{{ m_logs_group }}"

- set_fact:
    update_php_log: "{{ m_logs }}/update.php/{{ wiki_id }}.{{ lookup('pipe','date +%Y%m%d%H%M%S') }}.log"

- name: Try update.php
  block:

    - name: Run update.php on this wiki
      shell: >
        WIKI="{{ wiki_id }}" php "{{ m_mediawiki }}/maintenance/update.php" --quick --doshared >> {{ update_php_log }} 2>&1
      # run_once see [1]
      run_once: true

  rescue:

    - name: Get update.php log file
      shell: "cat {{ update_php_log }}"
      register: update_php_log_output

    - ansible.builtin.debug:
        var: update_php_log_output

    - name: Get php error log
      shell: "tail -n 50 {{ m_logs }}/php/php_errors.log"
      register: php_error_log_output

    - ansible.builtin.debug:
        var: php_error_log_output

    #
    # IF IT'S A MULTI-CONTENT REVISIONS ISSUE
    #
    - ansible.builtin.debug:
        msg: "Multi-Content Revisions error detected. Ref https://phabricator.wikimedia.org/T212428"
      when: '"Main slot of revision not found in database" in update_php_log_output'

    - name: "Run populateContentTables.php to fix Multi-Content Revisions issue"
      shell: >
        WIKI="{{ wiki_id }}" php "{{ m_mediawiki }}/maintenance/populateContentTables.php" >> {{ update_php_log }} 2>&1
      # run_once see [1]
      run_once: true
      when: '"Main slot of revision not found in database" in update_php_log_output'

    - name: "Retry update.php after populateContentTables.php"
      shell: >
        WIKI="{{ wiki_id }}" php "{{ m_mediawiki }}/maintenance/update.php" --quick >> {{ update_php_log }} 2>&1
      # run_once see [1]
      run_once: true
      when: '"Main slot of revision not found in database" in update_php_log_output'
    #
    # END MULTI-CONTENT REVISIONS TROUBLESHOOTING
    #

    # Used to force failure here, but if update.php works the second time, don't fail. If it fails the second time
    # then there's no reason to force the failure.
    # - name: Force failure after reporting
    #   command: /bin/false
  tags:
    - update.php
