---
- name: Ensure user's meza-ansible and alt-meza-ansible in group "wheel"
  user:
    name: "{{ item }}"
    # primary group
    group: wheel
    move_home: true
    home: "{{ m_home }}/{{ item }}"
  with_items:
    - meza-ansible
    - alt-meza-ansible

- name: Ensure user alt-meza-ansible .ssh dir configured
  file:
    path: "{{ m_home }}/alt-meza-ansible/.ssh"
    owner: alt-meza-ansible
    group: wheel
    mode: 0700
    state: directory

- name: Copy meza-ansible authorized_keys to alt-meza-ansible
  shell: >
    cp
    {{ m_home }}/meza-ansible/.ssh/authorized_keys
    {{ m_home }}/alt-meza-ansible/.ssh/authorized_keys

- name: Ensure user meza-ansible and alt-meza-ansible authorized_keys configured
  file:
    path: "{{ m_home }}/{{ item }}/.ssh/authorized_keys"
    owner: "{{ item }}"
    group: wheel
    mode: 0644
  with_items:
    - meza-ansible
    - alt-meza-ansible

- name: Set authorized key for alt-meza-ansible
  authorized_key:
    user: alt-meza-ansible
    state: present
    key: "{{ lookup('file', '{{ m_home }}/meza-ansible/.ssh/id_rsa.pub') }}"

- name: Ensure no password on alt-meza-ansible user
  shell: passwd --delete alt-meza-ansible
  failed_when: false

- name: Ensure /etc/sudoers.d/meza-ansible in place
  template:
    src: "sudoers_meza-ansible.j2"
    dest: "{{ m_meza_sudeoers_file }}"
    owner: root
    group: root
    mode: "0644"

# Without this, we sometimes get error "yum lockfile is held by another process"
# because PackageKit will upgrade packages on its own
- name: Ensure PackageKit is removed
  yum:
    lock_timeout: 180  # wait up to 3 minutes for a lock ansible/ansible#57189
    name: PackageKit
    state: absent
  when: ansible_distribution_file_variety == 'RedHat'

- name: ensure deltarpm is installed and latest
  yum:
    lock_timeout: 180  # wait up to 3 minutes for a lock ansible/ansible#57189
    name: deltarpm
    state: latest
  tags:
    - latest
  when: >
    ansible_facts['distribution_major_version'] == "7"
    and
    (
      ansible_facts['distribution'] == "CentOS"
      or
      ansible_facts['distribution'] == "RedHat"
    )

- name: Ensure apt cache updated (Debian only)
  apt:
    update_cache: true
  when: ansible_distribution_file_variety == "Debian"

- name: Ensure aptitude installed to use Ansible 'package' (Debian only)
  apt:
    name: aptitude
    state: present
    force_apt_get: true
  when: ansible_distribution_file_variety == "Debian"

- name: Upgrade all packages
  package: name=* state=latest
  environment:
    # If `install_ms_sql_driver: True` is set in config, MS SQL drivers will be
    # installed. When these drivers are updated they require accepting end user
    # license agreements.
    ACCEPT_EULA: 'y'
  tags:
    - latest
    - upgrade-packages

# FIXME #807: for RedHat may need to enable "Optional RPMs"
- name: Ensure EPEL installed via epel-release package (CentOS and Rocky Linux)
  yum:
    lock_timeout: 180  # wait up to 3 minutes for a lock ansible/ansible#57189
    name: epel-release
    state: present
  when: ansible_distribution == "CentOS" or ansible_distribution == "Rocky"
  tags:
    - latest

- name: Check if EPEL repo is already configured (RedHat only)
  stat:
    path: "/etc/yum.repos.d/epel.repo"
  register: epel_repofile_result
  when: ansible_distribution == "RedHat"
  tags:
    - latest

- name: Ensure EPEL installed via URL (RedHat only)
  yum:
    lock_timeout: 180  # wait up to 3 minutes for a lock ansible/ansible#57189
    # yamllint disable-line rule:line-length
    name: "https://dl.fedoraproject.org/pub/epel/epel-release-latest-{{ ansible_distribution_major_version }}.noarch.rpm"
    state: present
  register: result
  until: '"failed" not in result'
  retries: 5
  delay: 10
  when: >
    ansible_distribution == "RedHat"
    and not
    epel_repofile_result.stat.exists
  tags:
    - latest

- name: Import EPEL GPG key (RedHat only)
  rpm_key:
    # yamllint disable-line rule:line-length
    key: "/etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-{{ ansible_distribution_major_version }}"
    state: present
  when: >
    ansible_distribution == "RedHat"
    and not
    epel_repofile_result.stat.exists
  ignore_errors: "{{ ansible_check_mode }}"
  tags:
    - latest

- name: Ensure optional repos enabled (RedHat Only)
  shell: subscription-manager repos --enable rhel-7-server-optional-rpms
  tags:
    - latest
  when:
    - ansible_facts['distribution'] == "RedHat"
    - ansible_facts['distribution_major_version'] == "7"

- name: ensure libselinux-python installed prior to SELinux (RedHat/CentOS only)
  yum: name=libselinux-python state=installed
  tags:
    - latest
  when: >
    ansible_facts['distribution_major_version'] == "7"
    and
    (
      ansible_facts['distribution'] == "CentOS"
      or
      ansible_facts['distribution'] == "RedHat"
    )

- name: Ensure python3-selinux installed for Rocky/RHEL8
  ansible.builtin.dnf:
    lock_timeout: 180
    name: python3-libselinux
    state: installed
  tags:
    - latest
  when:
    - ansible_facts['distribution'] == "Rocky"
    - ansible_facts['distribution_major_version'] == "8"

# We could do this in 'getmeza.sh' but that makes it harder to manage this code.
# Caution: getmeza.sh is what installs Ansible and Python in the first place.
# getmeza.sh also sets up the CentOS package repo where we get the old packages.
- name: Version lock packages for Ansible and Python
  block:
    - name: Ensure dnf versionlock is installed
      ansible.builtin.dnf:
        name: dnf-command(versionlock)
        state: installed

    - name: Pin packages for Ansible and Python 
      ansible.builtin.shell:
        cmd: dnf versionlock add {{ item }}
      with_items:
        - ansible
        - python36
      register: versionlock_result
  rescue:
    - name: Show versionlock_result
      ansible.builtin.debug:
        msg: versionlock_result
  when:
    - ansible_facts['distribution'] == "Rocky"
    - ansible_facts['distribution_major_version'] == "8"
  become: true
  become_user: root
  # do not ignore errors because if we don't versionlock, then uncontrolled 
  # upgrades to these central packages could occur
  ignore_errors: false

- name: Ensure base packages installed CentOS7/RHEL7/Debian
  package:
    name:
      - ntp
      - ntpdate
      - ntp-doc
      - openssh-server
      - "{{ package_openssh_client }}"
      - vim
      - git
      - net-tools
      - "{{ package_firewall }}"
      - rsyslog
      - jq
      - tree
      - "{{ package_cron }}"
      - rsync
    state: present
  tags:
    - latest
  when: >
    ansible_facts['distribution'] == "Debian"
    or
    (
      ansible_facts['distribution_major_version'] == "7"
      and
      (
        ansible_facts['distribution'] == "CentOS"
        or
        ansible_facts['distribution'] == "RedHat"
      )
    )

- name: Install Rocky/RHEL8 base packages
  ansible.builtin.dnf:
    lock_timeout: 180  # wait up to 3 minutes for a lock ansible/ansible#57189
    name:
      - chrony
      - firewalld
      - git
      - jq
      - net-tools
      - openssh-clients
      - openssh-server
      - python3-pip
      - rsync
      - rsyslog
      - selinux-policy
      - tree
      - vim
    state: installed
  tags:
    - latest
  when: >
    ansible_facts['distribution_major_version'] == "8"
    and
    (
      ansible_facts['distribution'] == "Rocky"
      or
      ansible_facts['distribution'] == "RedHat"
    )


- name: Ensure selinux-policy installed (RedHat/CentOS only)
  yum:
    name: selinux-policy
    state: latest
  when: ansible_distribution_file_variety == "RedHat"
  tags:
    - latest

- name: put SELinux in permissive mode (RedHat/CentOS only)
  selinux:
    policy: targeted
    state: permissive  # log actions that would be blocked if state=enforcing
  when: ansible_distribution_file_variety == "RedHat"

- name: Ensure firewalld is running and enable it at boot (RedHat/CentOS only)
  service:
    name: firewalld
    state: started
    enabled: true
  when:
    - docker_skip_tasks is not defined or not docker_skip_tasks
    - ansible_distribution_file_variety == "RedHat"

- name: Ensure UFW is enabled and denying access by default (Debian only)
  ufw:
    state: enabled
    direction: incoming
    policy: deny
  when:
    - docker_skip_tasks is not defined or not docker_skip_tasks
    - ansible_distribution_file_variety == "Debian"

# Make sure we don't block SSH right away. Not sure why this isn't required for
# firewalld/centos...must be different defaults.
- ufw:
    rule: allow
    name: OpenSSH
  when:
    - docker_skip_tasks is not defined or not docker_skip_tasks
    - ansible_distribution_file_variety == "Debian"


#
# SSH config
#
- name: Ensure sshd is running and enabled
  service:
    name: "{{ service_ssh }}"
    state: started
    enabled: true
  when: docker_skip_tasks is not defined or not docker_skip_tasks

- name: Ensure SSH client and SSH Daemon configs in place
  template:
    src: "ssh_config.j2"
    dest: "/etc/ssh/ssh_config"
    owner: root
    group: root
    mode: "0644"
  when: use_default_ssh_config

- name: Ensure SSH client and SSH Daemon configs in place
  template:
    src: "sshd_config.j2"
    dest: "/etc/ssh/sshd_config"
    owner: root
    group: root
    mode: "0600"
  when: use_default_ssh_config
  notify:
    - restart sshd


# Replace the following shell commands:
# chkconfig ntpd on # Activate service
# ntpdate pool.ntp.org # Synchronize the system clock with 0.pool.ntp.org server
# service ntpd start # Start service
# FIXME: this is duplicated from above, right?
# No reason it needs to be here twice?
# - name: Install NTP
#   package: name=ntp state=installed
#   tags:
#       - latest
#   when: use_ntp

- name: Ensure NTP is running and enabled as configured.
  service:
    name: "{{ service_ntp }}"
    state: started
    enabled: true
  when: >
    use_ntp
    and
    ansible_facts['distribution_major_version'] == "7"
    and
    (
      ansible_facts['distribution'] == "CentOS"
      or
      ansible_facts['distribution'] == "RedHat"
    )

- name: Enable chrony for Rocky/RHEL8
  service:
    name: chronyd
    state: started
    enabled: true
  when: >
    use_ntp
    and
    ansible_facts['distribution_major_version'] == "8"
    and
    (
      ansible_facts['distribution'] == "Rocky"
      or
      ansible_facts['distribution'] == "RedHat"
    )

- name: Copy the ntp.conf template file
  template: src=ntp.conf.j2 dest=/etc/ntp.conf
  notify:
    - restart ntp rhel7
  when: >
    use_ntp
    and
    ansible_facts['distribution_major_version'] == "7"
    and
    (
      ansible_facts['distribution'] == "CentOS"
      or
      ansible_facts['distribution'] == "RedHat"
    )

# FIXME #809: PIP required first; has dependencies; needed on all hosts?
# Speed up encrypt/decrypt operations
# yamllint disable-line rule:line-length
# ref: http://docs.ansible.com/ansible/playbooks_vault.html#speeding-up-vault-operations
# - name: Ensure PIP cryptography package installed
#   pip:
#     name: cryptography

- name: Ensure install directory configured
  file:
    path: "{{ m_paths.install.path }}"
    state: directory
    owner: "{{ m_paths.install.owner }}"
    group: "{{ m_paths.install.group }}"
    mode: "{{ m_paths.install.mode }}"

- name: Ensure data directory configured
  file:
    path: "{{ m_meza_data }}"
    state: directory
    owner: "{{ m_data_owner }}"
    group: "{{ m_data_group }}"
    mode: "{{ m_data_mode }}"

- name: Ensure deploy directory in place
  file:
    path: "{{ m_deploy }}"
    state: directory
    owner: root
    group: root
    mode: 0755

- name: "Ensure {{ m_tmp }} exists"
  file:
    path: "{{ m_tmp }}"
    owner: meza-ansible
    group: wheel
    mode: 0755
    state: directory

- name: "Ensure {{ m_logs }} exists"
  file:
    path: "{{ m_logs }}"
    owner: "{{ m_logs_owner }}"
    group: "{{ m_logs_group }}"
    mode: "{{ m_logs_mode }}"
    state: directory

- name: "Ensure {{ m_logs }} sub directories exist"
  file:
    path: "{{ m_logs }}/{{ item }}"
    owner: "{{ m_logs_owner }}"
    group: "{{ m_logs_group }}"
    mode: "{{ m_logs_mode }}"
    state: directory
  with_items:
    - jobqueue
    - php
    - deploy
    - deploy-output
    - usr
    - cleanup

# Prevent runJobs and other scripts from running when application may be in
# indeterminate state
- name: Ensure crontab empty for meza-ansible when overwriting wikis
  shell: crontab -u meza-ansible -r
  when:
    - force_overwrite_from_backup is defined
    - force_overwrite_from_backup == true

  # Ignore errors due issue #699: If a crontab doesn't exist yet this command
  # will fail
  failed_when: false

- name: Ensure CA package installed
  package:
    name: ca-certificates
    state: present

# Ref: http://docs.ansible.com/ansible/playbooks_loops.html#id4
- name: Copy any custom PEM-format CA certs into place
  copy:
    src: "{{ item }}"
    dest: "{{ path_custom_pem_ca_trust }}"
    owner: root
    mode: "0755"
  with_fileglob:
    - "{{ m_local_public }}/custom-pem-ca-trust/*"
  register: new_custom_pem_ca_certs

- name: Copy any custom OpenSSL extended-format CA certs into place
  copy:
    src: "{{ item }}"
    dest: "{{ path_custom_extended_ca_trust }}"
    owner: root
    mode: "0755"
  with_fileglob:
    - "{{ m_local_public }}/custom-extended-ca-trust/*"
  register: new_custom_extended_ca_certs

- name: Update CA trust if certs changed
  shell: "{{ command_update_ca_trust }}"
  when: new_custom_pem_ca_certs.changed or new_custom_extended_ca_certs.changed

- name: Ensure meza-ansible has .gitconfig
  template:
    src: "gitconfig.j2"
    dest: "{{ m_home }}/meza-ansible/.gitconfig"
    owner: "meza-ansible"
    group: "wheel"
    mode: 0644

- name: Check if obsolete Node.JS version of Parsoid exists on this server
  stat:
    path: "{{ m_parsoid_service_path }}"
  register: parsoid_stat_result

- name: "Do Parsoid cleanup if {{ m_parsoid_service_path }} exists"
  include_tasks: parsoid-cleanup.yml
  when: parsoid_stat_result.stat.exists
